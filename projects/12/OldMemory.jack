// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static int freeList;
    static Array ram, heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; //heapBase
        let heap[0] = 0;
        let heap[1] = 14335;
        let freeList = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prev, curr, next, segSize, minSize, minCurr, minPrev, largeVal;
        let largeVal = heap[1] + 1; // Just greater than the actual largest possible
        let prev = 0;
        let minSize = largeVal;
        let curr = freeList;
        while (next != 0) {
            let next = heap[curr]; //next
            let segSize = heap[curr + 1]; //size
            if ((segSize > size + 1) & (segSize < minSize)) { // Just need +1 extra space with strict inequality
                let minSize = segSize;
                let minCurr = curr;
                let minPrev = prev;
            }
            if (next = 0) {// This is when you return and break up the linked list
                if (minSize = largeVal) {
                    return -1; //This is if we fail to find a suitable space
                } else {
                    if (minCurr = freeList) {let freeList = heap[freeList + 2];} // reset the start of the freeList if we allocate it to memory
                    if (minSize < size + 3 ) { // minSize <= size + 2
                        let heap[minPrev] = heap[minCurr]; //if the segment is exactly correct just set the
                        return heap[minCurr + 2];
                    } else {
                        let heap[minCurr + 1] = heap[minCurr + 1] - (size + 2);
                        let heap[minCurr + heap[minCurr + 1] + 1 - size] = size;
                        return heap[minCurr + heap[minCurr + 1] + 2 - size];
                    }
                }
            }
        let prev = curr;
        let curr = next;
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let heap[o[-2]] = freeList;
        let freeList = o;
        return;
    }
}
