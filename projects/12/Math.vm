function Math.init 1
push constant 16
pop static 0
push static 0
call Array.new 1
pop static 1
push constant 0
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push static 0
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push local 0
push constant 1
sub
push static 1
add
pop pointer 1
push that 0
push constant 2
call Math.multiply 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.multiply 4
push argument 1
call Math.bit 1
pop local 3
push constant 0
pop local 0
push argument 0
pop local 1
push static 0
pop local 2
label WHILE_EXP0
push local 2
push constant 16
lt
not
if-goto WHILE_END0
push local 2
push local 3
add
pop pointer 1
push that 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
add
pop local 0
label IF_FALSE0
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.divide 0
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math._divide 2
push argument 0
push argument 1
call Math.sign 2
call Math.multiply 2
return
function Math.sqrt 3
push argument 0
push argument 0
call Math.multiply 2
pop local 0
push argument 0
push constant 1
add
push argument 0
push constant 1
add
call Math.multiply 2
pop local 1
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push argument 0
push constant 2
call Math.divide 2
pop local 2
push argument 0
push local 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
return
goto IF_END0
label IF_FALSE0
push argument 0
push local 2
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
pop local 1
goto IF_END1
label IF_FALSE1
push local 2
pop local 0
label IF_END1
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
push argument 0
call Math.multiply 2
return
label IF_FALSE0
push argument 0
return
function Math.bit 3
push static 0
call Array.new 1
pop local 2
push static 0
pop local 1
label WHILE_EXP0
push argument 0
push constant 0
gt
not
if-goto WHILE_END0
push argument 0
push local 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 2
add
push constant 0
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 0
push local 0
sub
pop argument 0
goto IF_END0
label IF_FALSE0
push local 1
push local 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 2
return
function Math._divide 1
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push constant 2
push argument 1
call Math.multiply 2
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 2
push local 0
call Math.multiply 2
return
goto IF_END1
label IF_FALSE1
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
label IF_END1
function Math.sign 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
return
goto IF_END1
label IF_FALSE1
push constant 1
neg
return
label IF_END1
goto IF_END0
label IF_FALSE0
push argument 1
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
neg
return
goto IF_END2
label IF_FALSE2
push constant 1
return
label IF_END2
label IF_END0
