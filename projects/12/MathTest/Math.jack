// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static Array bitArray;  // Stops stack overfow from the bit function

    // Initializes the Math library.
    function void init() {
        var int i;
        let n = 16;
        let bitArray = Array.new(n);
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let i = 1;
        while (i < n) {
            let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
            let i = i + 1;
        }
        return;
    }

    function int twoPow(int bit) {
        return powersOfTwo[bit];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        var Array bit_values;
        let bit_values = Math.bit(y);
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < n) {
            if (bit_values[i] = 1){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int _div, _sign;
        let _div = Math._divide(Math.abs(x), Math.abs(y));
        let _sign = Math.sign(x, y);
        return _sign * _div;
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int y, j, pow;
        let y = 0;
        let j = (n / 2) - 1;
        while (j > -1) {
            let pow = (y + powersOfTwo[j]) * (y + powersOfTwo[j]);
            if (((pow - 1) < x) & (pow > 0)) {
                let y = y + powersOfTwo[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if (x < 0) {
            return -1 * x;
        }
        return x;
    }

    // Returns an array of values for which correspond to when the i-th bit of x is 1
    function Array bit(int x) {
        var int curr_n, i;
        let i = n - 2;
        // we need to check if things are negative early in the computation
        if ( x < 0 ) {
            let bitArray[n - 1] = 1;
            let x = x - (powersOfTwo[n - 1]); // x + 2^n
        } else {
            let bitArray[n - 1] = 0;
        }
        while (i > -1) {  //It may prove better to do this with i but idk x > 0
            if ((x + 1) > powersOfTwo[i]) { // Greater than or equal in int
                let bitArray[i] = 1;
                let x = x - powersOfTwo[i];
            }
            else {
                let bitArray[i] = 0;
            }
            let i = i - 1;
        }
        return bitArray;
    }

    //Does the computation for the division algo
    function int _divide(int x, int y) {
        var int q;
        if ((y > x) | (y < 0)) {
            return 0;
        }
        let q = Math._divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }
    }

    //Returns the sign for the division as an int for bervity
    function int sign(int x, int y) {
        if (x < 0) {
            if (y < 0) {
                return 1;
            }
            else {
                return -1;
            }
        } else {
            if (y < 0) {
                return -1;
            }
            else {
                return 1;
            }
        }
    }
}
